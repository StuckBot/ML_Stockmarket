# -*- coding: utf-8 -*-
"""Clustering_with_stocks.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h1iqe9H_2bOh9vkyU7Uogv-gOxU-vku5

# **Clustering Stocks using K-Means**
"""

import pandas_datareader.data as web
from matplotlib import pyplot as plt
import pandas as pd
import numpy as np
import datetime

# define instruments to download
companies_dict = {
 'ICICIBANK': 'ICICIBANK.NS',
 'SBI': 'SBIN.NS',
 'HDFCBANK': 'HDFCBANK.NS',
 'GAIL': 'GAIL.NS',
 'INFOSYS': 'INFY.NS',
 'RELIANCE':'RELIANCE.NS',
 'HCL': 'HCLTECH.NS',
 'SAIL': 'SAIL.NS',
 'NTPC': 'NTPC.NS',
 'ONGC': 'ONGC.NS',
 'IOC': 'IOC.NS',
}

companies = sorted(companies_dict.items(), key=lambda x: x[1])

# Define which online source to use
data_source = 'yahoo'

# define start and end dates
start_date = '2018-01-01'
end_date = '2019-12-31'

# Use pandas_datareader.data.DataReader to load the desired data list(companies_dict.values()) used for python 3 compatibility
panel_data = web.DataReader(list(companies_dict.values()), data_source, start_date, end_date)

print(panel_data.axes)

# Find Stock Open and Close Values
stock_close = panel_data['Close']
stock_open = panel_data['Open']

print(stock_close.iloc[0])

# Calculate daily stock movement
stock_close = np.array(stock_close).T
stock_open = np.array(stock_open).T

row, col = stock_close.shape

# create movements dataset filled with 0's
movements = np.zeros([row, col])

for i in range(0, row):
 movements[i,:] = np.subtract(stock_close[i,:], stock_open[i,:])

"""# Getting Sum of Movemnets"""

for i in range(0, len(companies)):
 print('Company: {}, Change: {}'.format(companies[i][0], sum(movements[i][:])))

"""# DATA EXPLORATION"""

plt.figure(figsize = (20,10)) 
plt.subplot(1,2,1) 
plt.title("Company:GAIL",fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.xlabel("Date",fontsize = 15)
plt.ylabel("Opening price",fontsize = 15)
plt.plot(panel_data["Open"]["GAIL.NS"])
plt.subplot(1,2,2) 
plt.title("Company:HCL",fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.xlabel("Date",fontsize = 15)
plt.ylabel("Opening price",fontsize = 15)
plt.plot(panel_data["Open"]["HCLTECH.NS"])

"""PLOTTING PRICES"""

plt.figure(figsize = (20,10)) # Adjusting figure size
plt.title("Company:GAIL",fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.xlabel("Date",fontsize = 20)
plt.ylabel("Price",fontsize = 20)
plt.plot(panel_data.iloc[0:30]["Open"]["GAIL.NS"],label = "Open") # Opening prices of first 30 days are plotted against date
plt.plot(panel_data.iloc[0:30]["Close"]["GAIL.NS"],label = "Close") # Closing prices of first 30 days are plotted against date
plt.legend(loc="upper left", frameon=False,framealpha=1,prop={"size": 22}) # Properties of legend box

"""MOVEMENT IS GOING DOWN FOR THIS STOCK"""

plt.figure(figsize = (20,8)) 
plt.title("Company:GAIL",fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel("Date",fontsize = 20)
plt.ylabel("Movement",fontsize = 20)
plt.plot(movements[0][0:30])

"""DATA NEEDS NORMALISATION BEFORE CLUSTERING"""

plt.figure(figsize=(18,16))
ax1 = plt.subplot(221)
plt.plot(movements[0][:])
plt.title(companies[0])

plt.subplot(222, sharey=ax1)
plt.plot(movements[1][:])
plt.title(companies[1])
plt.show()

plt.figure(figsize=(18,16))
ax2 = plt.subplot(221)
plt.plot(movements[2][:])
plt.title(companies[2])

plt.subplot(222, sharey=ax2)
plt.plot(movements[3][:])
plt.title(companies[3])
plt.show()

plt.figure(figsize=(18,16))
ax1 = plt.subplot(221)
plt.plot(movements[4][:])
plt.title(companies[4])

plt.subplot(222, sharey=ax1)
plt.plot(movements[5][:])
plt.title(companies[5])
plt.show()

plt.figure(figsize=(18,16))
ax2 = plt.subplot(221)
plt.plot(movements[6][:])
plt.title(companies[6])

plt.subplot(222, sharey=ax2)
plt.plot(movements[7][:])
plt.title(companies[7])
plt.show()

plt.figure(figsize=(18,16))
ax1 = plt.subplot(221)
plt.plot(movements[8][:])
plt.title(companies[8])

plt.subplot(222, sharey=ax1)
plt.plot(movements[9][:])
plt.title(companies[9])
plt.show()

plt.figure(figsize=(18,16))
ax2 = plt.subplot(221)
plt.plot(movements[10][:])
plt.title(companies[10])

# import Normalizer
from sklearn.preprocessing import Normalizer
# create the Normalizer
normalizer = Normalizer()

new = normalizer.fit_transform(movements)

print(new.max())
print(new.min())
print(new.mean())

"""K-Means Clustering"""

# import machine learning libraries
from sklearn.pipeline import make_pipeline
from sklearn.cluster import KMeans

# define normalizer
normalizer = Normalizer()

# create a K-means model with 5 clusters
kmeans = KMeans(n_clusters=5, max_iter=1000)

# make a pipeline chaining normalizer and kmeans
pipeline = make_pipeline(normalizer,kmeans)

# fit pipeline to daily stock movements
pipeline.fit(movements)

# predict cluster labels
labels = pipeline.predict(movements)

# create a DataFrame aligning labels & companies
df = pd.DataFrame({'labels': labels, 'companies': companies})

# display df sorted by cluster labels
print(df.sort_values('labels'))

"""BANKS USUALLY HAVE SAME MOVEMENTS, SO WE EXPECT THEM TO BELONG TO SIMILAR CLUSTERS.

WE SEE ONLY HDFCBANK WHICH DOES NOT BELONG TO A SIMILAR CLUSTER.

FURTHER EXPLORATION IS REQUIRED
"""